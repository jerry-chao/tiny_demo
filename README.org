#+TITLE: IM Demo演示示例
#+STARTUP: inlineimages
*  简答的IM的演示示例
** 基础概念

首先从大的角度理解什么是一个即时通讯系统，即时通讯系统解决的是什么问题，简单通俗点就是能够将信息从一个终端传递到目标终端。

[[./img/simple.png]]

整体来看做的事情非常的简单，这也是为什么实现一个IM的非常的简单，要在复杂的现实网络环境下，高效、可靠的实现上述功能就需要付出很多的努力。

我们通过一个简单的即时通讯示例，逐渐的是怎么一步一步的变成一个非常复杂的系统。凡是都有一个逐渐演变的过程。在演变的过程中，知道为什么遇到
这些问题，业界又是怎么解决这些问题的，做到不仅知其然，而且也要知其所以然。

** 问题分解
*** 连接服务器
建立和服务器的连接，并且能够进行双向的通信。
*** 发送消息到服务器
消息的发送者能够将自己想发送给接收者的信息发送到服务器上，后续的动作就交给服务器去完成。
*** 接收服务器投递的消息
消息接收者能够实时收到其他人发给自己的消息。
** 技术解决方案
技术选型上，直接采用TCP作为最底层的使用技术，当然也是可以选择UDP的技术，只要满足双向通讯的技术即可以。

编程语言上使用，我比较擅长的erlang变成语言进行demo的实现。首先实现一个简单的TCP的client-server的模型。
** 消息可靠性
*** 业务层ACK机制
业务层的ACK机制配合超时重传和去重逻辑保障消息的可靠性。
发送消息时发送者依据服务端的ACK来确认消息发送成功，配合客户端生成的seqid和服务端的去重机制保证消息可靠传递
到服务端的同时，也避免了消息重复。服务端确保同步完成消息的落盘后才会给客户端ACK，配合DB的持久化技术保障消息的
可靠持久化。存储的可靠性则充分利用了成熟的存储持久化方案，包含但不仅限于主从备份，集群方案等。消息投递上则是
则客户端业务上明确收到该消息后才会给服务端进行ACK，服务端进一步删除相应的消息。

#+begin_src plantuml :file ack.png
  @startuml
  group send logic [失败时进行重试]
          activate Sender
                  Sender -> IMS: send message(seqid=1)

                  group store logic [持久化，去重]
                          activate IMS
                                  IMS -> Storage: generate unique msgid\nstore message to db
                                  activate Storage
                                          Storage --> IMS: store message suc
                                  deactivate Storage
                                  IMS --> Sender: return suc, msgid
                          deactivate IMS
                  end
          deactivate Sender
  end

  group receiver logic [ack后移除消息]
          IMS -> Receiver: send message to Receiver
          activate IMS
                  activate Receiver
                          Receiver --> IMS: ack message
                  deactivate Receiver
                  IMS -> Storage: delete message
                  activate Storage
                          Storage --> IMS: ack delete message
                  deactivate Storage
          deactivate IMS
  end
  @enduml
#+end_src

#+RESULTS:
[[file:ack.png]]
*** 心跳机制
心跳机制主要时从业务体验上进一步提升可靠性的感知情况。客户端新建连接之后会进行离线消息的拉取，
为了保障体验，对于离线消息量太大的情况不会长时间阻塞客户端，会按照会话层面分批次的拉取。没有完全拉
取的会话，有新消息或者心跳都会继续进行拉取消息。对于由于各种不可控的因素导致消息没有及时的推送下来，
心跳机制也能确保消息的投递。

*** 单聊
*** 群聊
** 计划
*** 协议制定
协议选择上使用protobuf的二进制协议
**** 协议说明
| 字段    | 类型  | 说明                                                 |
|---------+-------+------------------------------------------------------|
| version | INT8  | 协议版本号                                           |
| command   | enum  | 顶层命令类型，CONNECT，DISCONNECT，REQUEST，RESPONSE |
| payload | bytes | 不同的协议表示不同的含义                             |

*****  登录 CONNECT
| 字段   | 类型   | 说明       |
|--------+--------+------------|
| org    | string | 组织       |
| appkey | string | 部门       |
| user   | string | 账号       |
| token  | string | 密码/token |

*****  断开 DISCONNECT
| 字段   | 类型   | 说明     |
|--------+--------+----------|
| code   | INT8   | 断开码   |
| reason | string | 断开原因 |

*****  请求 REQUEST
| 字段    | 类型   | 说明                                     |
|---------+--------+------------------------------------------|
| type    | ENUM   | 请求的具体类型， MESSAGE，CONTACT，GROUP |
| payload | bytes  | 请求的具体内容，详解见分开解释           |
| opts    | Option | 扩展信息列表                             |

扩展信息
| 字段    | 类型 | 说明         |
|---------+------+--------------|
| offline | bool | 是否保存离线 |

****** 消息 MESSAGE
| 字段    | 类型  | 说明                     |
|---------+-------+--------------------------|
| type    | ENUM  | 消息具体内容，TXT，IMAGE |
| payload | bytes | 消息的具体内容           |

******* 文本消息
| 字段    | 类型   | 说明           |
|---------+--------+----------------|
| txt     | string | 文本内容       |

******* 图片消息
| 字段 | 类型   | 说明     |
|------+--------+----------|
| url  | string | 文本内容 |

*****  相应 RESPONSE
| 字段   | 类型   | 说明     |
|--------+--------+----------|
| code   | INT8   | 请求结果 |
| reason | string | 结果说明 |

**** protobuf如下所示
#+begin_src protobuf
  syntax = "proto3";

  message Connect {
      string org = 1;
      string appkey = 2;
      string user = 3;
      string token = 4;
  }

  message Disconnect {
      int32 code = 1;
      string reason = 2;
  }

  enum Status {
      STATUS_OK = 0;
      STATUS_FAIL = 1;
  }

  message ConAck {
      Status status = 1;
      optional string reason = 2;
  }

  enum RequestType {
      MESSAGE = 0;
      CONTACT = 1;
      GROUP = 2;
  }

  message Option {
      bool offline = 1;
  }

  message Request {
      RequestType type = 1;
      bytes payload = 2;
      repeated Option opts = 3;
  }

  enum MessageType {
      TXT = 0;
      IMAGE = 1;
  }

  message MessageTxt {
      string txt = 1;
  }

  message MessageImg {
      string url = 1;
  }

  message Message {
      MessageType type = 1;
      bytes payload = 2;
  }

  message Response {
      int32 code = 1;
      string reason = 2;
  }

  message Command {
      int32 version = 1;
      optional Connect connect = 3;
      optional ConAck conack = 4;
      optional Disconnect disconnect = 5;
      optional Request request = 6;
      optional Response response = 7;
  }
#+end_src

**** protobuf具体实现

由于TCP的报文是字节流的形式，所以除了上面所示的通过pb将业务数据进行编码之后，还需要进行TCP层面的
拆包，当前均是采用在数据前添加相应的报文长度的方式。添加长度的方式一般有两种，固定长度和变长的方式。
目前为了减少数据大小，大多采用变长的方式，其中MQTT，protobuf本身的长度都是采用这种方式进行的。
https://developers.google.com/protocol-buffers/docs/encoding?hl=zh-cn#varints

**** 登录过程
#+begin_src plantuml :file login.png
@startuml
User -> IMS: Connect with UserName, Token
IMS --> User: ConAck with code，reason
@enduml
#+end_src

#+RESULTS:
[[file:login.png]]

*****  登录场景分析
