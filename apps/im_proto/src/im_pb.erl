%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.18.0
%% Version source: file
-module(im_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_CommandType/1, enum_value_by_symbol_CommandType/1]).
-export([enum_symbol_by_value_RequestType/1, enum_value_by_symbol_RequestType/1]).
-export([enum_symbol_by_value_MessageType/1, enum_value_by_symbol_MessageType/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("im_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'CommandType'() :: 'CONNECT' | 'DISCONNECT' | 'REQUEST' | 'RESPONSE'.
-type 'RequestType'() :: 'MESSAGE' | 'CONTACT' | 'GROUP'.
-type 'MessageType'() :: 'TXT' | 'IMAGE'.
-export_type(['CommandType'/0, 'RequestType'/0, 'MessageType'/0]).

%% message types
-type 'Command'() :: #'Command'{}.

-type 'Connect'() :: #'Connect'{}.

-type 'Disconnect'() :: #'Disconnect'{}.

-type 'Option'() :: #'Option'{}.

-type 'Request'() :: #'Request'{}.

-type 'MessageTxt'() :: #'MessageTxt'{}.

-type 'MessageImg'() :: #'MessageImg'{}.

-type 'Message'() :: #'Message'{}.

-type 'Response'() :: #'Response'{}.

-export_type(['Command'/0, 'Connect'/0, 'Disconnect'/0, 'Option'/0, 'Request'/0, 'MessageTxt'/0, 'MessageImg'/0, 'Message'/0, 'Response'/0]).
-type '$msg_name'() :: 'Command' | 'Connect' | 'Disconnect' | 'Option' | 'Request' | 'MessageTxt' | 'MessageImg' | 'Message' | 'Response'.
-type '$msg'() :: 'Command'() | 'Connect'() | 'Disconnect'() | 'Option'() | 'Request'() | 'MessageTxt'() | 'MessageImg'() | 'Message'() | 'Response'().
-export_type(['$msg_name'/0, '$msg'/0]).

-dialyzer({no_underspecs, encode_msg/1}).
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-dialyzer({no_underspecs, encode_msg/2}).
-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-dialyzer({no_underspecs, encode_msg/3}).
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Command' -> encode_msg_Command(id(Msg, TrUserData), TrUserData);
        'Connect' -> encode_msg_Connect(id(Msg, TrUserData), TrUserData);
        'Disconnect' -> encode_msg_Disconnect(id(Msg, TrUserData), TrUserData);
        'Option' -> encode_msg_Option(id(Msg, TrUserData), TrUserData);
        'Request' -> encode_msg_Request(id(Msg, TrUserData), TrUserData);
        'MessageTxt' -> encode_msg_MessageTxt(id(Msg, TrUserData), TrUserData);
        'MessageImg' -> encode_msg_MessageImg(id(Msg, TrUserData), TrUserData);
        'Message' -> encode_msg_Message(id(Msg, TrUserData), TrUserData);
        'Response' -> encode_msg_Response(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Command(Msg, TrUserData) -> encode_msg_Command(Msg, <<>>, TrUserData).


encode_msg_Command(#'Command'{version = F1, command = F2, payload = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 'CONNECT'; TrF2 =:= 0 -> B1;
                       true -> e_enum_CommandType(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               case iolist_size(TrF3) of
                   0 -> B2;
                   _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

encode_msg_Connect(Msg, TrUserData) -> encode_msg_Connect(Msg, <<>>, TrUserData).


encode_msg_Connect(#'Connect'{org = F1, appkey = F2, user = F3, token = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case is_empty_string(TrF3) of
                        true -> B2;
                        false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               case is_empty_string(TrF4) of
                   true -> B3;
                   false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
               end
           end
    end.

encode_msg_Disconnect(Msg, TrUserData) -> encode_msg_Disconnect(Msg, <<>>, TrUserData).


encode_msg_Disconnect(#'Disconnect'{code = F1, reason = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case is_empty_string(TrF2) of
                   true -> B1;
                   false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_Option(Msg, TrUserData) -> encode_msg_Option(Msg, <<>>, TrUserData).


encode_msg_Option(#'Option'{offline = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= false -> Bin;
                  true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
               end
           end
    end.

encode_msg_Request(Msg, TrUserData) -> encode_msg_Request(Msg, <<>>, TrUserData).


encode_msg_Request(#'Request'{type = F1, payload = F2, opts = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 'MESSAGE'; TrF1 =:= 0 -> Bin;
                       true -> e_enum_RequestType(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_Request_opts(TrF3, B2, TrUserData)
        end
    end.

encode_msg_MessageTxt(Msg, TrUserData) -> encode_msg_MessageTxt(Msg, <<>>, TrUserData).


encode_msg_MessageTxt(#'MessageTxt'{txt = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               case is_empty_string(TrF1) of
                   true -> Bin;
                   false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
               end
           end
    end.

encode_msg_MessageImg(Msg, TrUserData) -> encode_msg_MessageImg(Msg, <<>>, TrUserData).


encode_msg_MessageImg(#'MessageImg'{url = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               case is_empty_string(TrF1) of
                   true -> Bin;
                   false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
               end
           end
    end.

encode_msg_Message(Msg, TrUserData) -> encode_msg_Message(Msg, <<>>, TrUserData).


encode_msg_Message(#'Message'{type = F1, payload = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 'TXT'; TrF1 =:= 0 -> Bin;
                       true -> e_enum_MessageType(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_Response(Msg, TrUserData) -> encode_msg_Response(Msg, <<>>, TrUserData).


encode_msg_Response(#'Response'{code = F1, reason = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case is_empty_string(TrF2) of
                   true -> B1;
                   false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

e_mfield_Request_opts(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Option(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Request_opts([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_Request_opts(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Request_opts(Rest, Bin3, TrUserData);
e_field_Request_opts([], Bin, _TrUserData) -> Bin.

e_enum_CommandType('CONNECT', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_CommandType('DISCONNECT', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_CommandType('REQUEST', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_CommandType('RESPONSE', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_CommandType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_RequestType('MESSAGE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_RequestType('CONTACT', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_RequestType('GROUP', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_RequestType(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_MessageType('TXT', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_MessageType('IMAGE', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_MessageType(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Command', Bin, TrUserData) -> id(decode_msg_Command(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Connect', Bin, TrUserData) -> id(decode_msg_Connect(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Disconnect', Bin, TrUserData) -> id(decode_msg_Disconnect(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Option', Bin, TrUserData) -> id(decode_msg_Option(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Request', Bin, TrUserData) -> id(decode_msg_Request(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MessageTxt', Bin, TrUserData) -> id(decode_msg_MessageTxt(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MessageImg', Bin, TrUserData) -> id(decode_msg_MessageImg(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Message', Bin, TrUserData) -> id(decode_msg_Message(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Response', Bin, TrUserData) -> id(decode_msg_Response(Bin, TrUserData), TrUserData).



decode_msg_Command(Bin, TrUserData) -> dfp_read_field_def_Command(Bin, 0, 0, 0, id(0, TrUserData), id('CONNECT', TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Command(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Command_version(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Command(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Command_command(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Command(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Command_payload(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Command(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'Command'{version = F@_1, command = F@_2, payload = F@_3};
dfp_read_field_def_Command(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_Command(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_Command(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_Command(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Command(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Command_version(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_Command_command(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_Command_payload(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Command(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_Command(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_Command(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_Command(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_Command(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_Command(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'Command'{version = F@_1, command = F@_2, payload = F@_3}.

d_field_Command_version(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Command_version(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Command_version(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Command(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_Command_command(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Command_command(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Command_command(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_CommandType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Command(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_Command_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Command_payload(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Command_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Command(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_Command(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_Command(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_Command(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Command(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_Command(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_Command(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Command(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Command(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_Command(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Command(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_Command(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Command(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_Command(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Command(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_Connect(Bin, TrUserData) -> dfp_read_field_def_Connect(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Connect(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Connect_org(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Connect(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Connect_appkey(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Connect(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Connect_user(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Connect(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_Connect_token(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Connect(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'Connect'{org = F@_1, appkey = F@_2, user = F@_3, token = F@_4};
dfp_read_field_def_Connect(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_Connect(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_Connect(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_Connect(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Connect(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Connect_org(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_Connect_appkey(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_Connect_user(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_Connect_token(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Connect(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_Connect(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_Connect(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_Connect(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_Connect(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_Connect(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'Connect'{org = F@_1, appkey = F@_2, user = F@_3, token = F@_4}.

d_field_Connect_org(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Connect_org(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Connect_org(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Connect(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_Connect_appkey(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Connect_appkey(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Connect_appkey(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Connect(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_Connect_user(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Connect_user(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Connect_user(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Connect(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_Connect_token(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_Connect_token(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Connect_token(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Connect(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_Connect(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_Connect(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_Connect(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_Connect(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_Connect(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_Connect(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_Connect(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Connect(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_Connect(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Connect(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_Connect(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_Connect(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_Connect(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_Connect(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_Disconnect(Bin, TrUserData) -> dfp_read_field_def_Disconnect(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Disconnect(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Disconnect_code(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Disconnect(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Disconnect_reason(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Disconnect(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'Disconnect'{code = F@_1, reason = F@_2};
dfp_read_field_def_Disconnect(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Disconnect(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Disconnect(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Disconnect(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Disconnect(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Disconnect_code(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_Disconnect_reason(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Disconnect(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Disconnect(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Disconnect(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Disconnect(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Disconnect(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Disconnect(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'Disconnect'{code = F@_1, reason = F@_2}.

d_field_Disconnect_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Disconnect_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Disconnect_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Disconnect(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_Disconnect_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Disconnect_reason(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Disconnect_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Disconnect(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_Disconnect(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Disconnect(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Disconnect(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Disconnect(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Disconnect(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Disconnect(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Disconnect(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Disconnect(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Disconnect(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Disconnect(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Disconnect(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Disconnect(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Disconnect(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Disconnect(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_Option(Bin, TrUserData) -> dfp_read_field_def_Option(Bin, 0, 0, 0, id(false, TrUserData), TrUserData).

dfp_read_field_def_Option(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_Option_offline(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_Option(<<>>, 0, 0, _, F@_1, _) -> #'Option'{offline = F@_1};
dfp_read_field_def_Option(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_Option(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_Option(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_Option(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_Option(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Option_offline(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Option(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_Option(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_Option(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_Option(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_Option(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_Option(<<>>, 0, 0, _, F@_1, _) -> #'Option'{offline = F@_1}.

d_field_Option_offline(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_Option_offline(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_Option_offline(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_Option(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_Option(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_Option(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_Option(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Option(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_Option(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_Option(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_Option(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Option(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_Option(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Option(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_Option(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Option(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_Option(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_Option(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_Request(Bin, TrUserData) -> dfp_read_field_def_Request(Bin, 0, 0, 0, id('MESSAGE', TrUserData), id(<<>>, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_Request(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Request_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Request_payload(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Request(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Request_opts(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Request(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #'Request'{type = F@_1, payload = F@_2, opts = lists_reverse(R1, TrUserData)};
dfp_read_field_def_Request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_Request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Request_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_Request_payload(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_Request_opts(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_Request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_Request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_Request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_Request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_Request(<<>>, 0, 0, _, F@_1, F@_2, R1, TrUserData) -> #'Request'{type = F@_1, payload = F@_2, opts = lists_reverse(R1, TrUserData)}.

d_field_Request_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Request_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Request_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_RequestType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_Request_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Request_payload(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Request_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_Request_opts(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Request_opts(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Request_opts(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Option(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Request(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_Request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_Request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_Request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_MessageTxt(Bin, TrUserData) -> dfp_read_field_def_MessageTxt(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_MessageTxt(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_MessageTxt_txt(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_MessageTxt(<<>>, 0, 0, _, F@_1, _) -> #'MessageTxt'{txt = F@_1};
dfp_read_field_def_MessageTxt(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_MessageTxt(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_MessageTxt(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_MessageTxt(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_MessageTxt(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_MessageTxt_txt(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MessageTxt(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_MessageTxt(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_MessageTxt(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_MessageTxt(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_MessageTxt(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_MessageTxt(<<>>, 0, 0, _, F@_1, _) -> #'MessageTxt'{txt = F@_1}.

d_field_MessageTxt_txt(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_MessageTxt_txt(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_MessageTxt_txt(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_MessageTxt(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_MessageTxt(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_MessageTxt(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_MessageTxt(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_MessageTxt(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_MessageTxt(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_MessageTxt(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_MessageTxt(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MessageTxt(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_MessageTxt(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MessageTxt(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_MessageTxt(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_MessageTxt(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_MessageTxt(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_MessageTxt(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_MessageImg(Bin, TrUserData) -> dfp_read_field_def_MessageImg(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_MessageImg(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_MessageImg_url(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_MessageImg(<<>>, 0, 0, _, F@_1, _) -> #'MessageImg'{url = F@_1};
dfp_read_field_def_MessageImg(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_MessageImg(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_MessageImg(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_MessageImg(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_MessageImg(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_MessageImg_url(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_MessageImg(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_MessageImg(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_MessageImg(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_MessageImg(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_MessageImg(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_MessageImg(<<>>, 0, 0, _, F@_1, _) -> #'MessageImg'{url = F@_1}.

d_field_MessageImg_url(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_MessageImg_url(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_MessageImg_url(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_MessageImg(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_MessageImg(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_MessageImg(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_MessageImg(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_MessageImg(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_MessageImg(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_MessageImg(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_MessageImg(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MessageImg(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_MessageImg(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MessageImg(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_MessageImg(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_MessageImg(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_MessageImg(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_MessageImg(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_Message(Bin, TrUserData) -> dfp_read_field_def_Message(Bin, 0, 0, 0, id('TXT', TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Message(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Message_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Message(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Message_payload(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'Message'{type = F@_1, payload = F@_2};
dfp_read_field_def_Message(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Message(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Message_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_Message_payload(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Message(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'Message'{type = F@_1, payload = F@_2}.

d_field_Message_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Message_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Message_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_MessageType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_Message_payload(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Message_payload(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Message_payload(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Message(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_Response(Bin, TrUserData) -> dfp_read_field_def_Response(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Response(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Response_code(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Response(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Response_reason(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'Response'{code = F@_1, reason = F@_2};
dfp_read_field_def_Response(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Response(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Response_code(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_Response_reason(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Response(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'Response'{code = F@_1, reason = F@_2}.

d_field_Response_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Response_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Response_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Response(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_Response_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Response_reason(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Response_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_Response(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Response(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Response(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Response(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Response(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

d_enum_CommandType(0) -> 'CONNECT';
d_enum_CommandType(1) -> 'DISCONNECT';
d_enum_CommandType(2) -> 'REQUEST';
d_enum_CommandType(3) -> 'RESPONSE';
d_enum_CommandType(V) -> V.

d_enum_RequestType(0) -> 'MESSAGE';
d_enum_RequestType(1) -> 'CONTACT';
d_enum_RequestType(2) -> 'GROUP';
d_enum_RequestType(V) -> V.

d_enum_MessageType(0) -> 'TXT';
d_enum_MessageType(1) -> 'IMAGE';
d_enum_MessageType(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Command' -> merge_msg_Command(Prev, New, TrUserData);
        'Connect' -> merge_msg_Connect(Prev, New, TrUserData);
        'Disconnect' -> merge_msg_Disconnect(Prev, New, TrUserData);
        'Option' -> merge_msg_Option(Prev, New, TrUserData);
        'Request' -> merge_msg_Request(Prev, New, TrUserData);
        'MessageTxt' -> merge_msg_MessageTxt(Prev, New, TrUserData);
        'MessageImg' -> merge_msg_MessageImg(Prev, New, TrUserData);
        'Message' -> merge_msg_Message(Prev, New, TrUserData);
        'Response' -> merge_msg_Response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Command/3}).
merge_msg_Command(#'Command'{version = PFversion, command = PFcommand, payload = PFpayload}, #'Command'{version = NFversion, command = NFcommand, payload = NFpayload}, _) ->
    #'Command'{version =
                   if NFversion =:= undefined -> PFversion;
                      true -> NFversion
                   end,
               command =
                   if NFcommand =:= undefined -> PFcommand;
                      true -> NFcommand
                   end,
               payload =
                   if NFpayload =:= undefined -> PFpayload;
                      true -> NFpayload
                   end}.

-compile({nowarn_unused_function,merge_msg_Connect/3}).
merge_msg_Connect(#'Connect'{org = PForg, appkey = PFappkey, user = PFuser, token = PFtoken}, #'Connect'{org = NForg, appkey = NFappkey, user = NFuser, token = NFtoken}, _) ->
    #'Connect'{org =
                   if NForg =:= undefined -> PForg;
                      true -> NForg
                   end,
               appkey =
                   if NFappkey =:= undefined -> PFappkey;
                      true -> NFappkey
                   end,
               user =
                   if NFuser =:= undefined -> PFuser;
                      true -> NFuser
                   end,
               token =
                   if NFtoken =:= undefined -> PFtoken;
                      true -> NFtoken
                   end}.

-compile({nowarn_unused_function,merge_msg_Disconnect/3}).
merge_msg_Disconnect(#'Disconnect'{code = PFcode, reason = PFreason}, #'Disconnect'{code = NFcode, reason = NFreason}, _) ->
    #'Disconnect'{code =
                      if NFcode =:= undefined -> PFcode;
                         true -> NFcode
                      end,
                  reason =
                      if NFreason =:= undefined -> PFreason;
                         true -> NFreason
                      end}.

-compile({nowarn_unused_function,merge_msg_Option/3}).
merge_msg_Option(#'Option'{offline = PFoffline}, #'Option'{offline = NFoffline}, _) ->
    #'Option'{offline =
                  if NFoffline =:= undefined -> PFoffline;
                     true -> NFoffline
                  end}.

-compile({nowarn_unused_function,merge_msg_Request/3}).
merge_msg_Request(#'Request'{type = PFtype, payload = PFpayload, opts = PFopts}, #'Request'{type = NFtype, payload = NFpayload, opts = NFopts}, TrUserData) ->
    #'Request'{type =
                   if NFtype =:= undefined -> PFtype;
                      true -> NFtype
                   end,
               payload =
                   if NFpayload =:= undefined -> PFpayload;
                      true -> NFpayload
                   end,
               opts =
                   if PFopts /= undefined, NFopts /= undefined -> 'erlang_++'(PFopts, NFopts, TrUserData);
                      PFopts == undefined -> NFopts;
                      NFopts == undefined -> PFopts
                   end}.

-compile({nowarn_unused_function,merge_msg_MessageTxt/3}).
merge_msg_MessageTxt(#'MessageTxt'{txt = PFtxt}, #'MessageTxt'{txt = NFtxt}, _) ->
    #'MessageTxt'{txt =
                      if NFtxt =:= undefined -> PFtxt;
                         true -> NFtxt
                      end}.

-compile({nowarn_unused_function,merge_msg_MessageImg/3}).
merge_msg_MessageImg(#'MessageImg'{url = PFurl}, #'MessageImg'{url = NFurl}, _) ->
    #'MessageImg'{url =
                      if NFurl =:= undefined -> PFurl;
                         true -> NFurl
                      end}.

-compile({nowarn_unused_function,merge_msg_Message/3}).
merge_msg_Message(#'Message'{type = PFtype, payload = PFpayload}, #'Message'{type = NFtype, payload = NFpayload}, _) ->
    #'Message'{type =
                   if NFtype =:= undefined -> PFtype;
                      true -> NFtype
                   end,
               payload =
                   if NFpayload =:= undefined -> PFpayload;
                      true -> NFpayload
                   end}.

-compile({nowarn_unused_function,merge_msg_Response/3}).
merge_msg_Response(#'Response'{code = PFcode, reason = PFreason}, #'Response'{code = NFcode, reason = NFreason}, _) ->
    #'Response'{code =
                    if NFcode =:= undefined -> PFcode;
                       true -> NFcode
                    end,
                reason =
                    if NFreason =:= undefined -> PFreason;
                       true -> NFreason
                    end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Command' -> v_msg_Command(Msg, [MsgName], TrUserData);
        'Connect' -> v_msg_Connect(Msg, [MsgName], TrUserData);
        'Disconnect' -> v_msg_Disconnect(Msg, [MsgName], TrUserData);
        'Option' -> v_msg_Option(Msg, [MsgName], TrUserData);
        'Request' -> v_msg_Request(Msg, [MsgName], TrUserData);
        'MessageTxt' -> v_msg_MessageTxt(Msg, [MsgName], TrUserData);
        'MessageImg' -> v_msg_MessageImg(Msg, [MsgName], TrUserData);
        'Message' -> v_msg_Message(Msg, [MsgName], TrUserData);
        'Response' -> v_msg_Response(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Command/3}).
-dialyzer({nowarn_function,v_msg_Command/3}).
v_msg_Command(#'Command'{version = F1, command = F2, payload = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [version | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_enum_CommandType(F2, [command | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [payload | Path], TrUserData)
    end,
    ok;
v_msg_Command(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Command'}, X, Path).

-compile({nowarn_unused_function,v_msg_Connect/3}).
-dialyzer({nowarn_function,v_msg_Connect/3}).
v_msg_Connect(#'Connect'{org = F1, appkey = F2, user = F3, token = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [org | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [appkey | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [user | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [token | Path], TrUserData)
    end,
    ok;
v_msg_Connect(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Connect'}, X, Path).

-compile({nowarn_unused_function,v_msg_Disconnect/3}).
-dialyzer({nowarn_function,v_msg_Disconnect/3}).
v_msg_Disconnect(#'Disconnect'{code = F1, reason = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [reason | Path], TrUserData)
    end,
    ok;
v_msg_Disconnect(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Disconnect'}, X, Path).

-compile({nowarn_unused_function,v_msg_Option/3}).
-dialyzer({nowarn_function,v_msg_Option/3}).
v_msg_Option(#'Option'{offline = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [offline | Path], TrUserData)
    end,
    ok;
v_msg_Option(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Option'}, X, Path).

-compile({nowarn_unused_function,v_msg_Request/3}).
-dialyzer({nowarn_function,v_msg_Request/3}).
v_msg_Request(#'Request'{type = F1, payload = F2, opts = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_RequestType(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [payload | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_Option(Elem, [opts | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'Option'}}, F3, [opts | Path])
    end,
    ok;
v_msg_Request(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Request'}, X, Path).

-compile({nowarn_unused_function,v_msg_MessageTxt/3}).
-dialyzer({nowarn_function,v_msg_MessageTxt/3}).
v_msg_MessageTxt(#'MessageTxt'{txt = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [txt | Path], TrUserData)
    end,
    ok;
v_msg_MessageTxt(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MessageTxt'}, X, Path).

-compile({nowarn_unused_function,v_msg_MessageImg/3}).
-dialyzer({nowarn_function,v_msg_MessageImg/3}).
v_msg_MessageImg(#'MessageImg'{url = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [url | Path], TrUserData)
    end,
    ok;
v_msg_MessageImg(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'MessageImg'}, X, Path).

-compile({nowarn_unused_function,v_msg_Message/3}).
-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#'Message'{type = F1, payload = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_MessageType(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [payload | Path], TrUserData)
    end,
    ok;
v_msg_Message(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Message'}, X, Path).

-compile({nowarn_unused_function,v_msg_Response/3}).
-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#'Response'{code = F1, reason = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [reason | Path], TrUserData)
    end,
    ok;
v_msg_Response(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Response'}, X, Path).

-compile({nowarn_unused_function,v_enum_CommandType/3}).
-dialyzer({nowarn_function,v_enum_CommandType/3}).
v_enum_CommandType('CONNECT', _Path, _TrUserData) -> ok;
v_enum_CommandType('DISCONNECT', _Path, _TrUserData) -> ok;
v_enum_CommandType('REQUEST', _Path, _TrUserData) -> ok;
v_enum_CommandType('RESPONSE', _Path, _TrUserData) -> ok;
v_enum_CommandType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_CommandType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'CommandType'}, X, Path).

-compile({nowarn_unused_function,v_enum_RequestType/3}).
-dialyzer({nowarn_function,v_enum_RequestType/3}).
v_enum_RequestType('MESSAGE', _Path, _TrUserData) -> ok;
v_enum_RequestType('CONTACT', _Path, _TrUserData) -> ok;
v_enum_RequestType('GROUP', _Path, _TrUserData) -> ok;
v_enum_RequestType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_RequestType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'RequestType'}, X, Path).

-compile({nowarn_unused_function,v_enum_MessageType/3}).
-dialyzer({nowarn_function,v_enum_MessageType/3}).
v_enum_MessageType('TXT', _Path, _TrUserData) -> ok;
v_enum_MessageType('IMAGE', _Path, _TrUserData) -> ok;
v_enum_MessageType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_MessageType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'MessageType'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'CommandType'}, [{'CONNECT', 0}, {'DISCONNECT', 1}, {'REQUEST', 2}, {'RESPONSE', 3}]},
     {{enum, 'RequestType'}, [{'MESSAGE', 0}, {'CONTACT', 1}, {'GROUP', 2}]},
     {{enum, 'MessageType'}, [{'TXT', 0}, {'IMAGE', 1}]},
     {{msg, 'Command'},
      [#field{name = version, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []},
       #field{name = command, fnum = 2, rnum = 3, type = {enum, 'CommandType'}, occurrence = optional, opts = []},
       #field{name = payload, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'Connect'},
      [#field{name = org, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = appkey, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = user, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = token, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []}]},
     {{msg, 'Disconnect'}, [#field{name = code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}, #field{name = reason, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]},
     {{msg, 'Option'}, [#field{name = offline, fnum = 1, rnum = 2, type = bool, occurrence = optional, opts = []}]},
     {{msg, 'Request'},
      [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'RequestType'}, occurrence = optional, opts = []},
       #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
       #field{name = opts, fnum = 3, rnum = 4, type = {msg, 'Option'}, occurrence = repeated, opts = []}]},
     {{msg, 'MessageTxt'}, [#field{name = txt, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}]},
     {{msg, 'MessageImg'}, [#field{name = url, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}]},
     {{msg, 'Message'}, [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'MessageType'}, occurrence = optional, opts = []}, #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'Response'}, [#field{name = code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}, #field{name = reason, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]}].


get_msg_names() -> ['Command', 'Connect', 'Disconnect', 'Option', 'Request', 'MessageTxt', 'MessageImg', 'Message', 'Response'].


get_group_names() -> [].


get_msg_or_group_names() -> ['Command', 'Connect', 'Disconnect', 'Option', 'Request', 'MessageTxt', 'MessageImg', 'Message', 'Response'].


get_enum_names() -> ['CommandType', 'RequestType', 'MessageType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Command') ->
    [#field{name = version, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []},
     #field{name = command, fnum = 2, rnum = 3, type = {enum, 'CommandType'}, occurrence = optional, opts = []},
     #field{name = payload, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}];
find_msg_def('Connect') ->
    [#field{name = org, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = appkey, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = user, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = token, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []}];
find_msg_def('Disconnect') -> [#field{name = code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}, #field{name = reason, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def('Option') -> [#field{name = offline, fnum = 1, rnum = 2, type = bool, occurrence = optional, opts = []}];
find_msg_def('Request') ->
    [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'RequestType'}, occurrence = optional, opts = []},
     #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
     #field{name = opts, fnum = 3, rnum = 4, type = {msg, 'Option'}, occurrence = repeated, opts = []}];
find_msg_def('MessageTxt') -> [#field{name = txt, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}];
find_msg_def('MessageImg') -> [#field{name = url, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}];
find_msg_def('Message') -> [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'MessageType'}, occurrence = optional, opts = []}, #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}];
find_msg_def('Response') -> [#field{name = code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}, #field{name = reason, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('CommandType') -> [{'CONNECT', 0}, {'DISCONNECT', 1}, {'REQUEST', 2}, {'RESPONSE', 3}];
find_enum_def('RequestType') -> [{'MESSAGE', 0}, {'CONTACT', 1}, {'GROUP', 2}];
find_enum_def('MessageType') -> [{'TXT', 0}, {'IMAGE', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('CommandType', Value) -> enum_symbol_by_value_CommandType(Value);
enum_symbol_by_value('RequestType', Value) -> enum_symbol_by_value_RequestType(Value);
enum_symbol_by_value('MessageType', Value) -> enum_symbol_by_value_MessageType(Value).


enum_value_by_symbol('CommandType', Sym) -> enum_value_by_symbol_CommandType(Sym);
enum_value_by_symbol('RequestType', Sym) -> enum_value_by_symbol_RequestType(Sym);
enum_value_by_symbol('MessageType', Sym) -> enum_value_by_symbol_MessageType(Sym).


enum_symbol_by_value_CommandType(0) -> 'CONNECT';
enum_symbol_by_value_CommandType(1) -> 'DISCONNECT';
enum_symbol_by_value_CommandType(2) -> 'REQUEST';
enum_symbol_by_value_CommandType(3) -> 'RESPONSE'.


enum_value_by_symbol_CommandType('CONNECT') -> 0;
enum_value_by_symbol_CommandType('DISCONNECT') -> 1;
enum_value_by_symbol_CommandType('REQUEST') -> 2;
enum_value_by_symbol_CommandType('RESPONSE') -> 3.

enum_symbol_by_value_RequestType(0) -> 'MESSAGE';
enum_symbol_by_value_RequestType(1) -> 'CONTACT';
enum_symbol_by_value_RequestType(2) -> 'GROUP'.


enum_value_by_symbol_RequestType('MESSAGE') -> 0;
enum_value_by_symbol_RequestType('CONTACT') -> 1;
enum_value_by_symbol_RequestType('GROUP') -> 2.

enum_symbol_by_value_MessageType(0) -> 'TXT';
enum_symbol_by_value_MessageType(1) -> 'IMAGE'.


enum_value_by_symbol_MessageType('TXT') -> 0;
enum_value_by_symbol_MessageType('IMAGE') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"Command">>) -> 'Command';
fqbin_to_msg_name(<<"Connect">>) -> 'Connect';
fqbin_to_msg_name(<<"Disconnect">>) -> 'Disconnect';
fqbin_to_msg_name(<<"Option">>) -> 'Option';
fqbin_to_msg_name(<<"Request">>) -> 'Request';
fqbin_to_msg_name(<<"MessageTxt">>) -> 'MessageTxt';
fqbin_to_msg_name(<<"MessageImg">>) -> 'MessageImg';
fqbin_to_msg_name(<<"Message">>) -> 'Message';
fqbin_to_msg_name(<<"Response">>) -> 'Response';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Command') -> <<"Command">>;
msg_name_to_fqbin('Connect') -> <<"Connect">>;
msg_name_to_fqbin('Disconnect') -> <<"Disconnect">>;
msg_name_to_fqbin('Option') -> <<"Option">>;
msg_name_to_fqbin('Request') -> <<"Request">>;
msg_name_to_fqbin('MessageTxt') -> <<"MessageTxt">>;
msg_name_to_fqbin('MessageImg') -> <<"MessageImg">>;
msg_name_to_fqbin('Message') -> <<"Message">>;
msg_name_to_fqbin('Response') -> <<"Response">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"CommandType">>) -> 'CommandType';
fqbin_to_enum_name(<<"RequestType">>) -> 'RequestType';
fqbin_to_enum_name(<<"MessageType">>) -> 'MessageType';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('CommandType') -> <<"CommandType">>;
enum_name_to_fqbin('RequestType') -> <<"RequestType">>;
enum_name_to_fqbin('MessageType') -> <<"MessageType">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "im.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["im.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["im"].


get_msg_containment("im") -> ['Command', 'Connect', 'Disconnect', 'Message', 'MessageImg', 'MessageTxt', 'Option', 'Request', 'Response'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("im") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("im") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("im") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("im") -> ['CommandType', 'MessageType', 'RequestType'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"Request">>) -> "im";
get_proto_by_msg_name_as_fqbin(<<"MessageTxt">>) -> "im";
get_proto_by_msg_name_as_fqbin(<<"Disconnect">>) -> "im";
get_proto_by_msg_name_as_fqbin(<<"Connect">>) -> "im";
get_proto_by_msg_name_as_fqbin(<<"Command">>) -> "im";
get_proto_by_msg_name_as_fqbin(<<"Response">>) -> "im";
get_proto_by_msg_name_as_fqbin(<<"Message">>) -> "im";
get_proto_by_msg_name_as_fqbin(<<"MessageImg">>) -> "im";
get_proto_by_msg_name_as_fqbin(<<"Option">>) -> "im";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"RequestType">>) -> "im";
get_proto_by_enum_name_as_fqbin(<<"MessageType">>) -> "im";
get_proto_by_enum_name_as_fqbin(<<"CommandType">>) -> "im";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.18.0".

gpb_version_as_list() ->
    [4,18,0].

gpb_version_source() ->
    "file".
